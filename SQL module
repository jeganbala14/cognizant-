-- 1.User Upcoming Events- Show a list of all upcoming events a user is registered for in their city, sorted by date.

select * from events
order by start_date;

-- 2.Top Rated Events -Identify events with the highest average rating, considering only those that have received at least 10 feedback submissions. 

SELECT event_id, AVG(rating) AS avg_rating FROM feedback
GROUP BY event_id HAVING COUNT(rating) >= 10
ORDER BY avg_rating DESC;

-- 3.Inactive Users - Retrieve users who have not registered for any events in the last 90 days.

SELECT * FROM users where registration_date <'2024-11-04';

-- 4.Peak Session Hours - Count how many sessions are scheduled between 10 AM to 12 PM for each event.

SELECT event_id,title, COUNT(*) AS session_count FROM Session
WHERE TIME(start_time) BETWEEN '10:00:00' AND '12:00:00'
GROUP BY event_id,title;

-- 5.Most Active Cities- List the top 5 cities with the highest number of distinct user registrations.

SELECT city, COUNT(DISTINCT users.user_id) AS distinct_user_count FROM users
JOIN  Registrations ON users.user_id = Registrations.user_id
GROUP BY  city
ORDER BY  distinct_user_count DESC
LIMIT 5;

-- 6.Event Resource Summary-Generate a report showing the number of resources (PDFs, images, links) uploaded for each event.
SELECT 
    event_id,
    SUM(CASE WHEN resource_type = 'PDF' THEN 1 ELSE 0 END) AS pdf_count,
    SUM(CASE WHEN resource_type = 'IMAGE' THEN 1 ELSE 0 END) AS image_count,
    SUM(CASE WHEN resource_type = 'LINK' THEN 1 ELSE 0 END) AS link_count
FROM 
    resources
GROUP BY 
    event_id
ORDER BY 
    event_id;
    
-- 7.Low Feedback Alerts - List all users who gave feedback with a rating less than 3, along with their comments and associated event names.

SELECT u.full_name,f.rating,f.comments,e.title AS event_title
FROM feedback f
JOIN user u ON f.user_id = u.user_id
JOIN events e ON f.event_id = e.event_id
WHERE f.rating < 3;

-- 8.Sessions per Upcoming Event - Display all upcoming events with the count of sessions scheduled for them. 
SELECT 
    e.event_id,
    e.title,
    COUNT(s.session_id) AS session_count
FROM 
    events e
LEFT JOIN 
    session s ON e.event_id = s.event_id
WHERE 
    e.status = 'upcoming'
GROUP BY 
    e.event_id, e.title;
    
-- 9.Organizer Event Summary- For each event organizer, show the number of events created and their current status (upcoming, completed, cancelled).
SELECT 
    organizer_id,
    status,
    COUNT(*) AS event_count
FROM 
    events
GROUP BY 
    organizer_id, status
ORDER BY 
    organizer_id;
    
-- 10.Feedback Gap-Identify events that had registrations but received no feedback at all.

SELECT DISTINCT e.event_id, e.title
FROM events e
LEFT JOIN feedback f ON e.event_id = f.event_id
WHERE f.event_id IS NULL;

-- 11. Daily New User Count - Find the number of users who registered each day in the last 7 days.

SELECT DATE(registration_date) AS reg_date, COUNT(*) AS user_count
FROM Users
WHERE registration_date >= '2025-05-16'
GROUP BY reg_date;

-- 12. Event with Maximum Sessions - List the event(s) with the highest number of sessions.

SELECT e.title
FROM Events e
JOIN Session s ON e.event_id = s.event_id
GROUP BY e.event_id
ORDER BY COUNT(*) DESC
LIMIT 1;

-- 13. Average Rating per City - Calculate the average feedback rating of events conducted in each city.

SELECT 
    e.city, 
    AVG(f.rating) AS avg_rating
FROM Feedback f
JOIN Events e ON f.event_id = e.event_id
GROUP BY e.city;

-- 14. Most Registered Events - List top 3 events based on the total number of user registrations.

SELECT 
    e.title, 
    COUNT(r.registration_id) AS reg_count
FROM Events e
JOIN Registrations r ON e.event_id = r.event_id
GROUP BY e.event_id, e.title
ORDER BY reg_count DESC
LIMIT 3;

-- 15. Event Session Time Conflict - Identify overlapping sessions within the same event (i.e., session start and end times that conflict).

SELECT s1.event_id, s1.session_id AS s1_id, s2.session_id AS s2_id
FROM Session s1
JOIN Session s2 ON s1.event_id = s2.event_id AND s1.session_id < s2.session_id
WHERE s1.start_time < s2.end_time AND s1.end_time > s2.start_time;


-- 16.Unregistered Active Users - Find users who created an account in the last 30 days but havenâ€™t registered for any events. 
SELECT * FROM users
WHERE registration_date >= CURDATE() - INTERVAL 30 DAY
  AND user_id NOT IN (SELECT DISTINCT user_id FROM registrations
  );
  
-- 17.Identify speakers who are handling more than one session across all events.Identify speakers who are handling more than one session across all events.

SELECT speaker_name,COUNT(*) AS session_count FROM session
GROUP BY speaker_name HAVING COUNT(*) > 1;

-- 18.Resource Availability Check - List all events that do not have any resources uploaded.

SELECT e.event_id, e.title
FROM events e
LEFT JOIN resources r ON e.event_id = r.event_id
WHERE r.resource_id IS NULL;

-- 19.Completed Events with Feedback Summary - For completed events, show total registrations and average feedback rating.

SELECT e.title, COUNT(DISTINCT r.user_id) AS total_registrations, AVG(f.rating) AS avg_rating
FROM Events e
LEFT JOIN Registrations r ON e.event_id = r.event_id
LEFT JOIN Feedback f ON e.event_id = f.event_id
WHERE e.status = 'completed'
GROUP BY e.event_id;

-- 20.User Engagement Index-For each user, calculate how many events they attended and how many feedbacks they submitted.

SELECT u.user_id, COUNT(DISTINCT r.event_id) AS events_attended, COUNT(f.feedback_id) AS feedbacks_given
FROM Users u
LEFT JOIN Registrations r ON u.user_id = r.user_id
LEFT JOIN Feedback f ON u.user_id = f.user_id
GROUP BY u.user_id; 

-- 21.Top Feedback Providers-List top 5 users who have submitted the most feedback entries.

SELECT u.full_name, COUNT(f.feedback_id) AS feedback_count
FROM Feedback f
JOIN Users u ON f.user_id = u.user_id
GROUP BY f.user_id
ORDER BY feedback_count DESC
LIMIT 5;

-- 22.Duplicate Registrations Check-Detect if a user has been registered more than once for the same event.

SELECT user_id, event_id, COUNT(*) AS reg_count
FROM Registrations
GROUP BY user_id, event_id
HAVING reg_count > 1;

-- 23.Registration Trends - Show a month-wise registration count trend over the past 12 months.

SELECT DATE_FORMAT(registration_date, '%Y-%m') AS month, COUNT(*) AS reg_count
FROM Registrations
WHERE registration_date >= '2024-05-23'
GROUP BY month
ORDER BY month;

-- 24.Average Session Duration per Event-Compute the average duration (in minutes) of sessions in each event.

SELECT event_id, AVG(TIMESTAMPDIFF(MINUTE, start_time, end_time)) AS avg_duration
FROM Session
GROUP BY event_id;

-- 25.Events Without Sessions - List all events that currently have no sessions scheduled under them.

SELECT e.title
FROM Events e
LEFT JOIN Session s ON e.event_id = s.event_id
WHERE s.session_id IS NULL;
